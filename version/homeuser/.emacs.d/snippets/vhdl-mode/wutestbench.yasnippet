# -*- mode: snippet -*-
# name: wutestbench
# key: wutestbench
# --
library ieee;  
use ieee.std_logic_1164.all;  
use ieee.std_logic_unsigned.all;  
use ieee.math_real.all;
use ieee.numeric_std.all;
use ieee.std_logic_textio.all;
use std.textio.all;

entity ${1:testbench_name} is --空实体,不需要端口定义  
end ${1:$(yas/substr text "[^: ]*")};  

architecture ${2:Behavioral} of ${1:$(yas/substr text "[^: ]*")} is
  
  --被测试元件的声明 
  -- component led4  
  --   port (
  --     led :out std_logic_vector(3 downto 0);
  --     clk : in std_logic;
  --     rst_n : in std_logic 
  --     );  
  -- end component;
  
  -- component CHRONOSTARTSTOP
  --   Generic (bitSize : integer := 1);
  --   port (
  --     RESET : IN STD_LOGIC;
  --     CE : IN STD_LOGIC;
  --     CLK : IN STD_LOGIC;
  --     START : IN STD_LOGIC;
  --     STOP : IN STD_LOGIC;
  --     AUTORESET : IN STD_LOGIC;
  --     TIMEMES: OUT STD_LOGIC_VECTOR (bitSize-1 downto 0);
  --     OVERFLOW: OUT STD_LOGIC;
  --     RUNNING: OUT STD_LOGIC
  --     );
  -- end component;      





  -- 输入输出信号
  signal clk : std_logic := '1';  
  signal rst_n : std_logic := '1';
  
  -- signal led : std_logic_vector(3 downto 0);  


  constant CYCLE :time   :=20 ns;--时钟周期的定义
  constant RST_TIME : integer := 3; 
begin

  -- 端口连接
  -- uut : led4 port map  
  --   (  
  --     led  =>  led,
  --     clk  =>  clk,
  --     rst_n=>  rst_n
  --     );   

  -- u1 : CHRONOSTARTSTOP generic map(bitSize => 4) port map
  --   (
  --     RESET => reset,
  --     CE => ce,
  --     CLK => clk,     
  --     START =>  start,
  --     STOP => stop,
  --     AUTORESET => autoreset,
  --     TIMEMES => timemes,
  --     OVERFLOW => overflow,
  --     RUNNING => running
  --     );    



  process  --产生时钟信号 
  begin  
    clk <= '1';  
    wait for CYCLE/2;  
    clk <= '0';  
    wait for CYCLE/2;  
  end process; 

  process       
  begin
    rst_n <= '1';
    wait for CYCLE/10;
    rst_n <= '0';
    wait for CYCLE*RST_TIME;
    rst_n <= '1';
    wait;--will wait forever
  end process;


  --产生激励源  
  process
    -- VARIABLE seed1, seed2: positive; -- 缺省值为1
    -- VARIABLE rand: real; -- 产生范围 0 到 1.0 的随机数
    -- VARIABLE int_rand: integer range 0 to 255;  
  begin
    wait for CYCLE/10;
    din <= 0;
    wait for 10*CYCLE;--CYCLE*(RST_TIME+1)


    -- for i in 0 to 24 loop
    --   UNIFORM(seed1, seed2, rand);      
    --   int_rand := INTEGER(TRUNC(rand*255.0));
    --   din <= std_logic_vector(to_unsigned(int_rand, 8));
    --   wait for 1*CYCLE;
    -- end loop;


    wait;--will wait forever
  end process;


  --读取/保存数据
  -- f1:process(clk,rst_n)
  --   file stim_a:text open read_mode is "stimu1.txt";
  --   file stim_b:text open read_mode is "stimu2.txt";
  --   file resp_out:text open write_mode is "resp_out.txt";

  --   variable line_in_a:line;
  --   variable line_in_b:line;
  --   variable line_out:line;

  --   variable a_tmp : integer;
  --   variable b_tmp : integer;
  --   variable rsp_tmp : integer;
  -- begin
  --   if rst_n='0' then
  --     a <= (others => '0');
  --     b <= (others => '0');
  --   elsif clk'event and clk='1' then
  --     if not(endfile(stim_a)) and not(endfile(stim_b)) then
  --       readline(stim_a,line_in_a);
  --       read(line_in_a,a_tmp);

  --       readline(stim_b,line_in_b);
  --       read(line_in_b,b_tmp);

  --       a <= std_logic_vector(to_unsigned(a_tmp, 3));
  --       b <= std_logic_vector(to_unsigned(b_tmp, 3));

  --       rsp_tmp := to_integer(unsigned(y));
        
  --       write(line_out,rsp_tmp);
  --       writeline(resp_out,line_out);
  --     else
  --       assert false
  --         report "End of File!"
  --         severity note;
  --     end if;
  --   end if;
  -- end process f1;  


  
end ${2:$(yas/substr text "[^: ]*")}; 
